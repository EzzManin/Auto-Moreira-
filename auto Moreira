--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.9) ~  Much Love, Ferib 

]]--

local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if ((Byte(byte, 2) == 81) or (4593 <= 2672)) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16));
			if (repeatNext or (1168 > 3156)) then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif (Exponent == 2047) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if ((Len == 0) or (572 > 4486)) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif ((1404 == 1404) and (Type == 2)) then
				Cons = gFloat();
			elseif ((Type == 3) or (3748 < 2212)) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if ((gBit(Descriptor, 1, 1) == 0) or (1180 == 2180)) then
				local Type = gBit(Descriptor, 2, 3);
				local Mask = gBit(Descriptor, 4, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == 0) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif ((4090 < 4653) and (Type == 1)) then
					Inst[3] = gBits32();
				elseif (Type == 2) then
					Inst[3] = gBits32() - (2 ^ 16);
				elseif ((Type == 3) or (2652 < 196)) then
					Inst[3] = gBits32() - (2 ^ 16);
					Inst[4] = gBits16();
				end
				if (gBit(Mask, 1, 1) == 1) then
					Inst[2] = Consts[Inst[2]];
				end
				if ((4135 < 4817) and (gBit(Mask, 2, 2) == 1)) then
					Inst[3] = Consts[Inst[3]];
				end
				if ((272 == 272) and (gBit(Mask, 3, 3) == 1)) then
					Inst[4] = Consts[Inst[4]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if ((100 <= 3123) and (Idx >= Params)) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (Enum <= 58) then
					if (Enum <= 28) then
						if ((Enum <= 13) or (1369 > 4987)) then
							if ((Enum <= 6) or (863 >= 4584)) then
								if ((Enum <= 2) or (724 >= 1668)) then
									if ((428 < 1804) and (Enum <= 0)) then
										local A = Inst[2];
										Stk[A](Unpack(Stk, A + 1, Top));
									elseif (Enum == 1) then
										Stk[Inst[2]] = Stk[Inst[3]] / Stk[Inst[4]];
									else
										Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
									end
								elseif ((Enum <= 4) or (3325 > 4613)) then
									if (Enum > 3) then
										Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
									else
										local A = Inst[2];
										local B = Stk[Inst[3]];
										Stk[A + 1] = B;
										Stk[A] = B[Inst[4]];
									end
								elseif (Enum == 5) then
									Stk[Inst[2]] = Inst[3] ~= 0;
								else
									Stk[Inst[2]] = Stk[Inst[3]] * Inst[4];
								end
							elseif ((Enum <= 9) or (4950 <= 4553)) then
								if ((2665 <= 3933) and (Enum <= 7)) then
									local NewProto = Proto[Inst[3]];
									local NewUvals;
									local Indexes = {};
									NewUvals = Setmetatable({}, {__index=function(_, Key)
										local Val = Indexes[Key];
										return Val[1][Val[2]];
									end,__newindex=function(_, Key, Value)
										local Val = Indexes[Key];
										Val[1][Val[2]] = Value;
									end});
									for Idx = 1, Inst[4] do
										VIP = VIP + 1;
										local Mvm = Instr[VIP];
										if ((3273 == 3273) and (Mvm[1] == 20)) then
											Indexes[Idx - 1] = {Stk,Mvm[3]};
										else
											Indexes[Idx - 1] = {Upvalues,Mvm[3]};
										end
										Lupvals[#Lupvals + 1] = Indexes;
									end
									Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
								elseif ((3824 > 409) and (Enum > 8)) then
									Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
								else
									local B = Stk[Inst[4]];
									if not B then
										VIP = VIP + 1;
									else
										Stk[Inst[2]] = B;
										VIP = Inst[3];
									end
								end
							elseif (Enum <= 11) then
								if (Enum > 10) then
									local A = Inst[2];
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
								else
									Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
								end
							elseif (Enum == 12) then
								local NewProto = Proto[Inst[3]];
								local NewUvals;
								local Indexes = {};
								NewUvals = Setmetatable({}, {__index=function(_, Key)
									local Val = Indexes[Key];
									return Val[1][Val[2]];
								end,__newindex=function(_, Key, Value)
									local Val = Indexes[Key];
									Val[1][Val[2]] = Value;
								end});
								for Idx = 1, Inst[4] do
									VIP = VIP + 1;
									local Mvm = Instr[VIP];
									if ((2087 == 2087) and (Mvm[1] == 20)) then
										Indexes[Idx - 1] = {Stk,Mvm[3]};
									else
										Indexes[Idx - 1] = {Upvalues,Mvm[3]};
									end
									Lupvals[#Lupvals + 1] = Indexes;
								end
								Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
							elseif not Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum <= 20) then
							if (Enum <= 16) then
								if ((Enum <= 14) or (3404 > 4503)) then
									if (Stk[Inst[2]] or (3506 <= 1309)) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum > 15) then
									local B = Inst[3];
									local K = Stk[B];
									for Idx = B + 1, Inst[4] do
										K = K .. Stk[Idx];
									end
									Stk[Inst[2]] = K;
								else
									local A = Inst[2];
									local Index = Stk[A];
									local Step = Stk[A + 2];
									if ((2955 == 2955) and (Step > 0)) then
										if ((Index > Stk[A + 1]) or (2903 == 1495)) then
											VIP = Inst[3];
										else
											Stk[A + 3] = Index;
										end
									elseif ((4546 >= 2275) and (Index < Stk[A + 1])) then
										VIP = Inst[3];
									else
										Stk[A + 3] = Index;
									end
								end
							elseif (Enum <= 18) then
								if (Enum == 17) then
									if (Inst[2] <= Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local A = Inst[2];
									local Index = Stk[A];
									local Step = Stk[A + 2];
									if (Step > 0) then
										if (Index > Stk[A + 1]) then
											VIP = Inst[3];
										else
											Stk[A + 3] = Index;
										end
									elseif (Index < Stk[A + 1]) then
										VIP = Inst[3];
									else
										Stk[A + 3] = Index;
									end
								end
							elseif ((819 >= 22) and (Enum > 19)) then
								Stk[Inst[2]] = Stk[Inst[3]];
							else
								Stk[Inst[2]] = -Stk[Inst[3]];
							end
						elseif (Enum <= 24) then
							if ((3162 == 3162) and (Enum <= 22)) then
								if (Enum > 21) then
									local A = Inst[2];
									Stk[A] = Stk[A](Stk[A + 1]);
								else
									local A = Inst[2];
									local Results = {Stk[A](Stk[A + 1])};
									local Edx = 0;
									for Idx = A, Inst[4] do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
								end
							elseif ((Enum > 23) or (2369 > 4429)) then
								local A = Inst[2];
								local Results = {Stk[A]()};
								local Limit = Inst[4];
								local Edx = 0;
								for Idx = A, Limit do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							else
								local A = Inst[2];
								do
									return Unpack(Stk, A, Top);
								end
							end
						elseif (Enum <= 26) then
							if (Enum > 25) then
								if (Stk[Inst[2]] < Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								local A = Inst[2];
								local T = Stk[A];
								for Idx = A + 1, Inst[3] do
									Insert(T, Stk[Idx]);
								end
							end
						elseif (Enum > 27) then
							local A = Inst[2];
							do
								return Unpack(Stk, A, A + Inst[3]);
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
						end
					elseif ((4095 >= 3183) and (Enum <= 43)) then
						if ((Enum <= 35) or (3711 < 1008)) then
							if (Enum <= 31) then
								if (Enum <= 29) then
									local A = Inst[2];
									Stk[A](Stk[A + 1]);
								elseif ((Enum == 30) or (1049 <= 906)) then
									if ((4513 > 2726) and (Stk[Inst[2]] < Stk[Inst[4]])) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local A = Inst[2];
									Stk[A](Unpack(Stk, A + 1, Top));
								end
							elseif ((Enum <= 33) or (1481 >= 2658)) then
								if ((Enum > 32) or (3220 == 1364)) then
									Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
								else
									Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
								end
							elseif (Enum == 34) then
								local B = Inst[3];
								local K = Stk[B];
								for Idx = B + 1, Inst[4] do
									K = K .. Stk[Idx];
								end
								Stk[Inst[2]] = K;
							else
								Env[Inst[3]] = Stk[Inst[2]];
							end
						elseif (Enum <= 39) then
							if ((Enum <= 37) or (1054 > 3392)) then
								if ((Enum == 36) or (676 >= 1642)) then
									Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
								else
									Env[Inst[3]] = Stk[Inst[2]];
								end
							elseif ((4136 > 2397) and (Enum > 38)) then
								local A = Inst[2];
								do
									return Unpack(Stk, A, Top);
								end
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif ((Enum <= 41) or (4334 == 4245)) then
							if (Enum == 40) then
								if ((Stk[Inst[2]] <= Stk[Inst[4]]) or (4276 <= 3031)) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								Stk[Inst[2]] = {};
							end
						elseif (Enum == 42) then
							Stk[Inst[2]] = Upvalues[Inst[3]];
						else
							Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
						end
					elseif (Enum <= 50) then
						if ((Enum <= 46) or (4782 <= 1199)) then
							if ((Enum <= 44) or (4864 < 1902)) then
								Stk[Inst[2]] = Stk[Inst[3]] * Inst[4];
							elseif ((4839 >= 3700) and (Enum > 45)) then
								Stk[Inst[2]] = Inst[3] ~= 0;
							else
								local A = Inst[2];
								local T = Stk[A];
								local B = Inst[3];
								for Idx = 1, B do
									T[Idx] = Stk[A + Idx];
								end
							end
						elseif ((Enum <= 48) or (1075 > 1918)) then
							if (Enum > 47) then
								Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
							else
								local A = Inst[2];
								local B = Stk[Inst[3]];
								Stk[A + 1] = B;
								Stk[A] = B[Inst[4]];
							end
						elseif ((396 <= 3804) and (Enum > 49)) then
							local A = Inst[2];
							local C = Inst[4];
							local CB = A + 2;
							local Result = {Stk[A](Stk[A + 1], Stk[CB])};
							for Idx = 1, C do
								Stk[CB + Idx] = Result[Idx];
							end
							local R = Result[1];
							if R then
								Stk[CB] = R;
								VIP = Inst[3];
							else
								VIP = VIP + 1;
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
						end
					elseif (Enum <= 54) then
						if ((Enum <= 52) or (4169 == 2187)) then
							if (Enum > 51) then
								Stk[Inst[2]] = Inst[3] * Stk[Inst[4]];
							else
								Stk[Inst[2]][Inst[3]] = Inst[4];
							end
						elseif ((1406 == 1406) and (Enum == 53)) then
							if ((1531 < 4271) and (Stk[Inst[2]] < Inst[4])) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
						end
					elseif ((635 == 635) and (Enum <= 56)) then
						if (Enum == 55) then
							local A = Inst[2];
							local Results = {Stk[A](Unpack(Stk, A + 1, Top))};
							local Edx = 0;
							for Idx = A, Inst[4] do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						elseif (Stk[Inst[2]] <= Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif ((3373 <= 3556) and (Enum > 57)) then
						Stk[Inst[2]] = Stk[Inst[3]] / Stk[Inst[4]];
					elseif (Inst[2] < Stk[Inst[4]]) then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif ((Enum <= 87) or (3291 < 3280)) then
					if ((4386 >= 873) and (Enum <= 72)) then
						if (Enum <= 65) then
							if (Enum <= 61) then
								if (Enum <= 59) then
									local A = Inst[2];
									local Results, Limit = _R(Stk[A](Stk[A + 1]));
									Top = (Limit + A) - 1;
									local Edx = 0;
									for Idx = A, Top do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
								elseif (Enum == 60) then
									do
										return;
									end
								elseif ((921 <= 1102) and not Stk[Inst[2]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif ((4706 >= 963) and (Enum <= 63)) then
								if ((Enum == 62) or (960 <= 876)) then
									Stk[Inst[2]] = Stk[Inst[3]];
								else
									Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
								end
							elseif (Enum == 64) then
								Stk[Inst[2]] = Inst[3];
							else
								do
									return Stk[Inst[2]];
								end
							end
						elseif ((Enum <= 68) or (2066 == 932)) then
							if ((4825 < 4843) and (Enum <= 66)) then
								Stk[Inst[2]] = Inst[3];
							elseif ((Enum == 67) or (3877 >= 4537)) then
								Stk[Inst[2]] = {};
							else
								local A = Inst[2];
								Stk[A] = Stk[A]();
							end
						elseif ((Enum <= 70) or (4315 < 1726)) then
							if (Enum == 69) then
								Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]];
							else
								local B = Stk[Inst[4]];
								if (not B or (3679 < 625)) then
									VIP = VIP + 1;
								else
									Stk[Inst[2]] = B;
									VIP = Inst[3];
								end
							end
						elseif ((Enum == 71) or (4625 < 632)) then
							local A = Inst[2];
							local Step = Stk[A + 2];
							local Index = Stk[A] + Step;
							Stk[A] = Index;
							if (Step > 0) then
								if (Index <= Stk[A + 1]) then
									VIP = Inst[3];
									Stk[A + 3] = Index;
								end
							elseif (Index >= Stk[A + 1]) then
								VIP = Inst[3];
								Stk[A + 3] = Index;
							end
						else
							do
								return Stk[Inst[2]];
							end
						end
					elseif ((Enum <= 79) or (83 > 1780)) then
						if ((546 <= 1077) and (Enum <= 75)) then
							if (Enum <= 73) then
								Stk[Inst[2]] = #Stk[Inst[3]];
							elseif ((Enum == 74) or (996 > 4301)) then
								local A = Inst[2];
								do
									return Stk[A], Stk[A + 1];
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
							end
						elseif (Enum <= 77) then
							if (Enum > 76) then
								Stk[Inst[2]] = Inst[3] * Stk[Inst[4]];
							else
								for Idx = Inst[2], Inst[3] do
									Stk[Idx] = nil;
								end
							end
						elseif ((4070 > 687) and (Enum > 78)) then
							local A = Inst[2];
							local Step = Stk[A + 2];
							local Index = Stk[A] + Step;
							Stk[A] = Index;
							if (Step > 0) then
								if (Index <= Stk[A + 1]) then
									VIP = Inst[3];
									Stk[A + 3] = Index;
								end
							elseif (Index >= Stk[A + 1]) then
								VIP = Inst[3];
								Stk[A + 3] = Index;
							end
						elseif (Stk[Inst[2]] < Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 83) then
						if ((Enum <= 81) or (656 >= 3330)) then
							if ((Enum == 80) or (2492 <= 335)) then
								Stk[Inst[2]][Inst[3]] = Inst[4];
							elseif (Inst[2] <= Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum > 82) then
							if ((4322 >= 2562) and Stk[Inst[2]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							local A = Inst[2];
							Stk[A] = Stk[A](Stk[A + 1]);
						end
					elseif (Enum <= 85) then
						if ((Enum == 84) or (3637 >= 3770)) then
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						else
							for Idx = Inst[2], Inst[3] do
								Stk[Idx] = nil;
							end
						end
					elseif (Enum == 86) then
						Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
					else
						Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
					end
				elseif (Enum <= 102) then
					if (Enum <= 94) then
						if ((Enum <= 90) or (2379 > 4578)) then
							if (Enum <= 88) then
								if ((Stk[Inst[2]] == Inst[4]) or (483 > 743)) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif ((2454 > 578) and (Enum == 89)) then
								Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
							else
								Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
							end
						elseif (Enum <= 92) then
							if ((930 < 4458) and (Enum > 91)) then
								Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
							else
								local A = Inst[2];
								local T = Stk[A];
								local B = Inst[3];
								for Idx = 1, B do
									T[Idx] = Stk[A + Idx];
								end
							end
						elseif ((662 <= 972) and (Enum > 93)) then
							local A = Inst[2];
							Stk[A](Stk[A + 1]);
						else
							Stk[Inst[2]] = -Stk[Inst[3]];
						end
					elseif ((4370 == 4370) and (Enum <= 98)) then
						if ((Enum <= 96) or (4762 <= 861)) then
							if ((Enum == 95) or (1412 == 4264)) then
								VIP = Inst[3];
							else
								Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
							end
						elseif ((Enum == 97) or (3168 < 2153)) then
							Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]];
						elseif ((Inst[2] < Stk[Inst[4]]) or (4976 < 1332)) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif ((4628 == 4628) and (Enum <= 100)) then
						if (Enum == 99) then
							VIP = Inst[3];
						else
							Stk[Inst[2]] = Env[Inst[3]];
						end
					elseif (Enum == 101) then
						local A = Inst[2];
						Stk[A] = Stk[A]();
					else
						do
							return;
						end
					end
				elseif (Enum <= 109) then
					if (Enum <= 105) then
						if (Enum <= 103) then
							Stk[Inst[2]] = Upvalues[Inst[3]];
						elseif (Enum == 104) then
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Stk[A + 1]));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
						end
					elseif ((Enum <= 107) or (54 == 395)) then
						if ((82 == 82) and (Enum == 106)) then
							local A = Inst[2];
							local Results = {Stk[A](Stk[A + 1])};
							local Edx = 0;
							for Idx = A, Inst[4] do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						else
							Stk[Inst[2]] = #Stk[Inst[3]];
						end
					elseif ((Enum > 108) or (581 < 282)) then
						Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
					else
						Stk[Inst[2]] = Env[Inst[3]];
					end
				elseif (Enum <= 113) then
					if (Enum <= 111) then
						if ((Enum == 110) or (4609 < 2495)) then
							local A = Inst[2];
							local Results = {Stk[A](Unpack(Stk, A + 1, Top))};
							local Edx = 0;
							for Idx = A, Inst[4] do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						elseif ((1152 == 1152) and (Stk[Inst[2]] == Inst[4])) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum > 112) then
						local A = Inst[2];
						Stk[A](Unpack(Stk, A + 1, Inst[3]));
					else
						local A = Inst[2];
						local Results = {Stk[A]()};
						local Limit = Inst[4];
						local Edx = 0;
						for Idx = A, Limit do
							Edx = Edx + 1;
							Stk[Idx] = Results[Edx];
						end
					end
				elseif (Enum <= 115) then
					if ((1896 <= 3422) and (Enum == 114)) then
						local A = Inst[2];
						local C = Inst[4];
						local CB = A + 2;
						local Result = {Stk[A](Stk[A + 1], Stk[CB])};
						for Idx = 1, C do
							Stk[CB + Idx] = Result[Idx];
						end
						local R = Result[1];
						if R then
							Stk[CB] = R;
							VIP = Inst[3];
						else
							VIP = VIP + 1;
						end
					else
						local A = Inst[2];
						do
							return Stk[A](Unpack(Stk, A + 1, Inst[3]));
						end
					end
				elseif (Enum == 116) then
					local A = Inst[2];
					do
						return Stk[A], Stk[A + 1];
					end
				else
					local A = Inst[2];
					do
						return Stk[A](Unpack(Stk, A + 1, Inst[3]));
					end
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCalletFEnv(), ...);